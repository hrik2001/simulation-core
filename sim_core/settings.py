"""
Django settings for sim_core project.

Generated by 'django-admin startproject' using Django 5.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import sentry_sdk

load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-tf1!one#d4d^o*g#4a0307009xcw9nm7656u72$z^@1uye2%39"
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", None)
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", None)
TELEGRAM_TOPIC_ID = os.getenv("TELEGRAM_TOPIC_ID", None)

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("ENVIRONMENT", None) != "production"

ALLOWED_HOSTS = ["data-core.up.railway.app", "127.0.0.1", "localhost", "api.llamarisk.com"]
CSRF_TRUSTED_ORIGINS = ["https://data-core.up.railway.app", "https://api.llamarisk.com"]


# Application definition

INSTALLED_APPS = [
    "filebrowser",
    "explorer",
    "corsheaders",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "core",
    "uniswap",
    "arcadia",
    "ethena",
    "defimoney",
    "curvesim_simulations",
    "curve",
    "ecps",
    "django_celery_beat",  # for scheduling tasks
    "graphene_django",
    "django_celery_results",
]
EXPLORER_CONNECTIONS = {"Default": "default"}
EXPLORER_DEFAULT_CONNECTION = "default"

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "core.middleware.ExceptionMiddleware",
]

# CORS_ALLOWED_ORIGINS = [
# '*',
# ]

# settings.py

CORS_ALLOW_ALL_ORIGINS = True  # Or use CORS_ALLOWED_ORIGINS for a whitelist approach
CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]


ROOT_URLCONF = "sim_core.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "sim_core.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# if os.environ.get('ENVIRONMENT') == 'local':
# DATABASES = {
# 'default': {
# 'ENGINE': 'django.db.backends.sqlite3',
# 'NAME': BASE_DIR / 'db.sqlite3',
# }
# }
# elif os.environ.get('ENVIRONMENT') == 'production':
POSTGRES_DB = os.environ.get("POSTGRES_DB")  # database name
POSTGRES_PASSWORD = os.environ.get("POSTGRES_PASSWORD")  # database user password
POSTGRES_USER = os.environ.get("POSTGRES_USER")  # database username
POSTGRES_HOST = os.environ.get("POSTGRES_HOST")  # database host
POSTGRES_PORT = os.environ.get("POSTGRES_PORT")  # database port
DATABASES = {
    # "default": {
    #     "ENGINE": "django.db.backends.postgresql",
    #     "NAME": POSTGRES_DB,
    #     "USER": POSTGRES_USER,
    #     "PASSWORD": POSTGRES_PASSWORD,
    #     "HOST": POSTGRES_HOST,
    #     "PORT": POSTGRES_PORT,
    # },
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "curve_sim_test",
        "USER": "francescomangia",
        "PASSWORD": "",
        "HOST": "localhost",
        "PORT": "5432",
    },
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# STATIC_URL = 'static/'
STATIC_ROOT = "static"
STATICFILES_DIRS = []
STATIC_URL = "/static/"
STATICFILES_FINDERS = (
    "django.contrib.staticfiles.finders.FileSystemFinder",
    "django.contrib.staticfiles.finders.AppDirectoriesFinder",
)

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
MEDIA_ROOT = (BASE_DIR / Path("media")).resolve().as_posix()
CELERY_BROKER_URL = os.environ.get("REDIS_URL")
# CELERY_RESULT_BACKEND = os.environ["REDIS_URL"]
CELERY_RESULT_BACKEND = "django-db"
CELERY_RESULT_EXTENDED = True

FILEBROWSER_DIRECTORY = ""
DIRECTORY = ""

# CACHES = {
# 'default': {
# 'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
# 'LOCATION': 'unique-snowflake',
# }
# }
CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": os.environ.get(
            "REDIS_URL", "redis://127.0.0.1:6379"
        ),  # Use REDIS_URL from the environment, default to localhost
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "CACHE": None,
    }
}

# external API keys
MORALIS_KEY = os.environ.get("MORALIS_KEY")
SUBGRAPH_KEY = os.environ.get("SUBGRAPH_KEY")
DUNE_KEY = os.environ.get("DUNE_KEY")
COINANALYZE_KEY = os.environ.get("COINANALYZE_KEY")

if os.getenv("ENVIRONMENT", "").lower() == "production":
    if os.getenv("SENTRY_DSN") is not None:
        sentry_sdk.init(
            dsn=os.getenv("SENTRY_DSN"),
            # Set traces_sample_rate to 1.0 to capture 100%
            # of transactions for performance monitoring.
            traces_sample_rate=1.0,
            # Set profiles_sample_rate to 1.0 to profile 100%
            # of sampled transactions.
            # We recommend adjusting this value in production.
            profiles_sample_rate=1.0,
        )

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "{levelname} {asctime} {module} {process:d} {thread:d} {message}",
            "style": "{",
        },
    },
    "handlers": {
        "console": {
            "level": "INFO",
            "class": "logging.StreamHandler",
            "formatter": "verbose",
        },
    },
    "loggers": {
        "root": {
            "handlers": ["console"],
            "propagate": True,
        },
    },
}
